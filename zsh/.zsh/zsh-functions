# assumes github and slash separated plugin names
github_plugins=(
  sudosubin/zsh-github-cli
  zsh-users/zsh-completions
  zsh-users/zsh-syntax-highlighting
  #rupa/z
  # theme
  #miekg/lean
  # must be last
  #zdharma/fast-syntax-highlighting
)

for plugin in $github_plugins; do
  # clone the plugin from github if it doesn't exist
  if [[ ! -d ${ZDOTDIR:-$HOME}/.zsh/plugins/$plugin ]]; then
    mkdir -p ${ZDOTDIR:-$HOME}/.zsh/plugins/${plugin%/*}
    git clone --depth 1 --recursive https://github.com/$plugin.git ${ZDOTDIR:-$HOME}/.zsh/plugins/$plugin
  fi
  # load the plugin
  for initscript in ${plugin#*/}.zsh ${plugin#*/}.plugin.zsh ${plugin#*/}.sh; do
    if [[ -f ${ZDOTDIR:-$HOME}/.zsh/plugins/$plugin/$initscript ]]; then
      source ${ZDOTDIR:-$HOME}/.zsh/plugins/$plugin/$initscript
      break
    fi
  done
done

# clean up
unset github_plugins
unset plugin
unset initscript

alias plugpull="find ${ZDOTDIR:-$HOME}/.zsh/plugins -type d -exec test -e '{}/.git' ';' -print0 | xargs -I {} -0 git -C {} pull"

# numo AWS
function awsprofile() {
  export AWS_PROFILE="${1}"
}
 
function okta() {
  [[ -z "${AWS_PROFILE}" ]] \
    && echo "AWS profile is not set! (run \`export AWS_PROFILE=my-project-name\`)" >&2 \
    && return 1
  aws-okta exec ${AWS_PROFILE} -- "${@}"
}
 
function _tf_init () {
  # return 0 if subsequent commands should proceed
  TFSTATE=".terraform/terraform.tfstate"
  if [[ ! -e "${TFSTATE}" ]]
  then
    return 0
  fi
  if [[ "$(jq -r '.backend.type' < ${TFSTATE})" == "s3" ]]
  then
    awswhoami >/dev/null
    if [[ "$?" != "0" ]]
    then
      echo "Not going to remove existing state without working AWS credentials"
      return 1
    fi
    rm -f ${TFSTATE} >/dev/null 2>&1 || /bin/true
    return 0
  else
    echo "Terraform state is not remote! Move or delete ${TFSTATE} manually" >&2
  fi
  return 1
}

function numowork() {
  cd ~/Git\ Projects/
  nvim
}

# Check for active Tmux session. 
function active_tmux () {
session="code"

# Check if the session exists, discarding output
# We can check $? for the exit status (zero for success, non-zero for failure)
tmux has-session -t $session 2>/dev/null

if [ $? != 0 ]; then
  # Set up your session
  tmux new-session -s code
fi

# Attach to created session
tmux attach-session -t $session
}
